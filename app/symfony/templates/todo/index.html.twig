{% extends 'base.html.twig' %}

{% block title %}Todo List{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .todo-list {
            max-width: 600px;
            margin: 0 auto;
        }
        .todo-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            margin-bottom: 5px;
            border-radius: 5px;
            background-color: #f5f5f5;
        }
        .todo-done {
            background-color: #d1e7dd;
        }
        .todo-done .todo-title {
            text-decoration: line-through;
            color: #6c757d;
        }
        .todo-title {
            flex-grow: 1;
            cursor: pointer;
            padding: 8px;
        }
        .todo-actions {
            display: flex;
            gap: 10px;
        }
        .btn-toggle {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0 5px;
        }
        .btn-delete {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .delete-icon {
            width: 20px;
            height: 20px;
            fill: #dc3545;
        }
        .todo-form {
            display: flex;
            margin-bottom: 20px;
            gap: 10px;
        }
        .todo-input {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .btn-add {
            padding: 8px 16px;
            background-color: #0d6efd;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .btn-add:hover {
            background-color: #0b5ed7;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-5">
        <h1 class="text-center mb-4">Todo List</h1>

        <div class="todo-list">
            <form id="todo-form" class="todo-form">
                <input type="text" id="new-todo" class="todo-input" placeholder="Add a new todo..." required>
                <button type="submit" class="btn-add">Add</button>
            </form>

            <div id="todo-container">
                <!-- Les todos seront chargés ici via JavaScript -->
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        const trashIconSVG = `
            <svg class="delete-icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
            </svg>
        `;

        document.addEventListener('DOMContentLoaded', function() {
            fetchTodos();

            document.getElementById('todo-form').addEventListener('submit', function(e) {
                e.preventDefault();
                const input = document.getElementById('new-todo');
                const title = input.value.trim();

                if (title) {
                    createTodo(title);
                    input.value = '';
                }
            });

            document.getElementById('todo-container').addEventListener('click', function(e) {
                if (e.target.closest('.btn-delete')) {
                    const todoId = e.target.closest('.todo-item').dataset.id;
                    deleteTodo(todoId);
                }

                if (e.target.classList.contains('btn-toggle') || e.target.closest('.btn-toggle')) {
                    const todoItem = e.target.closest('.todo-item');
                    const todoId = todoItem.dataset.id;
                    toggleTodo(todoId);
                }

                if (e.target.classList.contains('todo-title')) {
                    const todoItem = e.target.closest('.todo-item');
                    const todoId = todoItem.dataset.id;
                    toggleTodo(todoId);
                }
            });
        });

        function fetchTodos() {
            fetch('/api/todos')
                .then(response => response.json())
                .then(data => {
                    renderTodos(data);
                })
                .catch(error => {
                    console.error('Error fetching todos:', error);
                    document.getElementById('todo-container').innerHTML = '<p class="text-center text-danger">Error loading todos.</p>';
                });
        }

        function createTodo(title) {
            fetch('/api/todos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ title: title }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        console.error('Error creating todo:', data.error);
                        return;
                    }

                    fetchTodos();
                })
                .catch(error => console.error('Error creating todo:', error));
        }

        function toggleTodo(id) {
            fetch(`/api/todos/${id}/toggle`, {
                method: 'PATCH',
            })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        console.error('Error toggling todo:', data.error);
                        return;
                    }

                    const todoItem = document.querySelector(`.todo-item[data-id="${id}"]`);
                    if (todoItem) {
                        if (data.done) {
                            todoItem.classList.add('todo-done');
                        } else {
                            todoItem.classList.remove('todo-done');
                        }

                        // Mettre à jour l'icône de basculement
                        const toggleBtn = todoItem.querySelector('.btn-toggle');
                        if (toggleBtn) {
                            toggleBtn.innerHTML = data.done ? '✓' : '○';
                            toggleBtn.title = data.done ? 'Mark as undone' : 'Mark as done';
                        }
                    }
                })
                .catch(error => console.error('Error toggling todo:', error));
        }

        function deleteTodo(id) {
            if (!confirm('Are you sure you want to delete this todo?')) {
                return;
            }

            fetch(`/api/todos/${id}`, {
                method: 'DELETE',
            })
                .then(response => {
                    if (!response.ok && response.status !== 204) {
                        throw new Error('Network response was not ok');
                    }

                    const todoItem = document.querySelector(`.todo-item[data-id="${id}"]`);
                    if (todoItem) {
                        todoItem.remove();

                        const todoContainer = document.getElementById('todo-container');
                        if (!todoContainer.querySelector('.todo-item')) {
                            todoContainer.innerHTML = '<p class="text-center">No todos found. Add one above!</p>';
                        }
                    }
                })
                .catch(error => console.error('Error deleting todo:', error));
        }

        function renderTodos(todos) {
            const container = document.getElementById('todo-container');

            if (todos.length === 0) {
                container.innerHTML = '<p class="text-center">No todos found. Add one above!</p>';
                return;
            }

            let html = '';

            todos.forEach(todo => {
                html += `
                    <div class="todo-item ${todo.done ? 'todo-done' : ''}" data-id="${todo.id}">
                        <div class="todo-title">${todo.title}</div>
                        <div class="todo-actions">
                            <button class="btn-toggle" title="${todo.done ? 'Mark as undone' : 'Mark as done'}">
                                ${todo.done ? '✓' : '○'}
                            </button>
                            <button class="btn-delete" title="Delete">
                                ${trashIconSVG}
                            </button>
                        </div>
                    </div>
                `;
            });

            container.innerHTML = html;
        }
    </script>
{% endblock %}
